						                              Assignment 3
						                                CIS 11
3.1.11

1.) Using the value -35, write it as an integer literal in decimal, hexadecimal, octal, and binary formats that are consistent with MASM syntax?

	 -35 or -35d for decimal. -35h for hexadecimal, -35q or -35o for octal, 11011101b 		for binary.

2.) (Yes/No): Is A5h a valid hexadecimal literal?

	No, because A5h would need a leading 0 for it to be a valid hexadecimal literal.

3.) (Yes/No): Does the multiplication operator (*) have a higher precedence than the division operator (/) in integer expressions?

	No, the multiplication and division operations are both at precedence level 3.

4.) Create a single integer expression that uses all the operators from Section 3.1.2. Calculate the value of the expression?

	(4 + 3) * (7 + 1) - (12 / 4) = 53

3.2.4 

4.) In the AddTwo program, which register holds the sum?

	 eax

5.) In the AddTwo program, which statement halts the program?

	 INVOKE ExitProcess,0.

3.3.3

1.) What types of files are produced by the assembler?

	 A file containing machine language called an object file. Optionally it produces a 		listing file. After it passes to the linker which then produces an executable file.

2.) (True/False): The linker extracts assembled procedures from the link library and inserts them in the executable program?

	True

3.) (True/False): When a program’s source code is modified, it must be assembled and linked again before it can be executed with the changes?

	 True

4.) Which operating system component reads and executes programs?

	 The operating system loader.

3.4.13

1.) Create an uninitialized data declaration for a 16-bit signed integer?

	value SWORD ?

2.) Create an uninitialized data declaration for an 8-bit unsigned integer?

	 value BYTE ?

3.) Create an uninitialized data declaration for an 8-bit signed integer?

	 value SBYTE ?

4.) Create an uninitialized data declaration for a 64-bit integer?

	value QWORD ?

5.) Which data type can hold a 32-bit signed integer?

	SDWORD

3.5.5

3.) Write a statement that causes the assembler to calculate the number of bytes in the following array, and assign the value to a symbolic constant named ArraySize?

myArray WORD 20 DUP (?)

ArraySize = ($ - myArray)

3.9.1

4.) Explain why the term assembler language is not quite correct?

	An assembler is a program that translates your source code so it’s not the actual 		language. It’s more like a compiler for higher level languages. 

5.) Explain the difference between big endian and little endian. Also, look up the origins of this term on the Web?

	Little-endian stores and retrieves data from memory from low to high. The least 		significant byte is stored at the first memory address allocated for the data. 		Remaining bytes are stored in the next consecutive memory positions.
	Big-endian order is the opposite it goes form high to low. The highest significant 		byte is stored at the first memory address allocated for the data. Remaining bytes 	are stored in the next consecutive memory positions.


6.) Why might you use a symbolic constant rather than an integer literal in your code?
	
	When the constant will be changing a lot through the whole code, it’s much 		easier to change as a symbolic constant in one place. Instead of searching the 		code for all the instances in the code of that constant.

25.) Which data directive creates a 32-bit signed integer variable?

	SDWORD

3.9.2

4.) Find out if you can declare a variable of type DWORD and assign it a negative value. What does this tell you about the assembler’s type checking?

	You could assign it a negative value although there will be no enforcement of the 		sign by the assembler because, it assumes the number is not in the twos 			compliment form.

7.) Declare an array of 120 uninitialized unsigned double word values?

	MyArray DWORD 120 ?

13.) Declare a string variable containing the word “TEST” repeated 500 times.

	BYTE 500 DUP ( “TEST” )

3.10

1.) Using the AddTwo program from Section 3.2 as a reference, write a program that calculates the following expression, using registers A= (A+B) - (C+D). Assign integer values to the EAX, EBX, ECX, and EDX registers.

.386
.model flat, stdcall
.stack 4096
ExitProcess proto, dwExitCode:dword

.code
main proc
	mov eax, 5
	mov ebx, 6
	mov ecx, 3
	mov edx, 3

	add eax, ebx
	add ecx, edx
	sub eax, ecx

	invoke ExitProcess,0
main endp
end main
	
